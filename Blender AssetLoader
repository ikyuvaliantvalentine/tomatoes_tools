import os
import re
import sys
import bpy
from PySide2.QtWidgets import *
from PySide2.QtCore import Qt, QEventLoop

bl_info = {
    "name": "PySide2 Asset Loader",
    "version": (0, 0, 1),
    "blender": (3, 0, 0),
    "location": "View3D > Properties > PySide2 Blender",
    "description": "LATER",       
    "category": "3D View"}


class Open_Mtools_Popup(bpy.types.Operator):
    '''Open Mtools popup '''
    bl_idname = "test.open_mtools_popup"
    bl_label = "M Tools"
    bl_options = {'REGISTER'}

    def execute(self, context):
        app = QApplication.instance()
        if not app:
            app = QApplication(sys.argv)
        
        self.widget = BlendFileSelector(r'E:/02_PIPELINE/NAME_PROJECTS/02_Maya/')
        self.widget.show()
        return {'RUNNING_MODAL'}

    
class BlendFileSelector(QWidget):
    def __init__(self, base_directory):
        super().__init__()

        self.base_directory = base_directory

        self.initUI()
        
    def initUI(self):
        self.setWindowTitle("Blend File Selector")
        self.setGeometry(100, 100, 800, 300)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        layout = QVBoxLayout()

        # Add a base directory selection dropdown
        category_layout = QHBoxLayout()

        category_label = QLabel("Category:")
        self.base_directory_combo = QComboBox()
        self.base_directory_combo.currentIndexChanged.connect(self.populate_assets)

        category_layout.addWidget(category_label)
        category_layout.addWidget(self.base_directory_combo)

        category_layout.setSpacing(10)
        category_layout.setAlignment(Qt.AlignLeft)

        self.base_directory_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        layout.addLayout(category_layout)

        # Left Column Layout
        left_column_layout = QVBoxLayout()
        
        spacer_item = QSpacerItem(20, 25)

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search Asset Name...")
        self.search_input.textChanged.connect(self.search_assets)
        self.search_input.setFixedHeight(25)

        # Connect both signals to populate assets and update search filter
        self.base_directory_combo.currentIndexChanged.connect(self.populate_assets)
        self.base_directory_combo.currentIndexChanged.connect(self.search_assets)

        asset_name_label = QLabel("Asset Name:")
        asset_name_label.setAlignment(Qt.AlignLeft)

        self.asset_list = QListWidget()
        self.asset_list.itemClicked.connect(self.update_blend_files)

        left_column_layout.addItem(spacer_item)
        left_column_layout.addWidget(self.search_input)
        left_column_layout.addWidget(asset_name_label)
        left_column_layout.addWidget(self.asset_list)

        # Right Column Layout
        right_column_layout = QVBoxLayout()

        stage_groupbox = QGroupBox("Stage")
        stage_groupbox.setAlignment(Qt.AlignLeft)

        stage_layout = QHBoxLayout()

        self.wip_radio = QRadioButton("Wip")
        self.published_radio = QRadioButton("Published")
        self.approved_radio = QRadioButton("Approved")

        self.wip_radio.toggled.connect(self.update_blend_files)
        self.published_radio.toggled.connect(self.update_blend_files)
        self.approved_radio.toggled.connect(self.update_blend_files)

        stage_layout.addWidget(self.wip_radio)
        stage_layout.addWidget(self.published_radio)
        stage_layout.addWidget(self.approved_radio)

        stage_groupbox.setLayout(stage_layout)

        blend_list_label = QLabel("Versions:")
        blend_list_label.setAlignment(Qt.AlignLeft)

        self.blend_list = QListWidget()

        right_column_layout.addWidget(stage_groupbox)
        right_column_layout.addWidget(blend_list_label)
        right_column_layout.addWidget(self.blend_list)

        # Combine Left and Right Columns in Main Layout
        main_layout = QHBoxLayout()
        main_layout.addLayout(left_column_layout)
        main_layout.addLayout(right_column_layout)

        layout.addLayout(category_layout)
        layout.addLayout(main_layout)

        # Add a link/append option checkbox
        option_layout = QHBoxLayout()

        self.button_group = QButtonGroup()  # Create a button group

        self.open_option = QRadioButton("Open")
        self.link_option = QRadioButton("Link")
        self.append_option = QRadioButton("Append")

        self.button_group.addButton(self.open_option)  # Add buttons to the group
        self.button_group.addButton(self.link_option)
        self.button_group.addButton(self.append_option)

        self.open_option.setChecked(True)  # Set the default option to "Open"

        option_layout.addWidget(self.open_option)
        option_layout.addWidget(self.link_option)
        option_layout.addWidget(self.append_option)

        # Add the "Open Blend File" button
        self.open_button = QPushButton("Open Blend File", clicked=self.open_blend_file)
        self.link_button = QPushButton("Link Blend File", clicked=self.link_blend_collection)
        self.append_button = QPushButton("Append Blend", clicked=self.append_blend_collection)

        self.open_button.setVisible(True)  # Initially hide the buttons
        self.link_button.setVisible(False)
        self.append_button.setVisible(False)

        spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        option_layout.addItem(spacer)
        option_layout.addWidget(self.open_button)
        option_layout.addWidget(self.link_button)
        option_layout.addWidget(self.append_button)

        layout.addLayout(option_layout)

        self.setLayout(layout)

        # Connect radio button toggled signals to functions
        self.open_option.toggled.connect(self.update_buttons_visibility)
        self.link_option.toggled.connect(self.update_buttons_visibility)
        self.append_option.toggled.connect(self.update_buttons_visibility)

        self.populate_base_directories()
        self.populate_assets()

    def update_buttons_visibility(self):
        self.open_button.setVisible(self.open_option.isChecked())
        self.link_button.setVisible(self.link_option.isChecked())
        self.append_button.setVisible(self.append_option.isChecked())

    def populate_base_directories(self):
        base_directories = os.listdir(self.base_directory)
        self.base_directory_combo.addItems(base_directories)

    def populate_assets(self):
        selected_folder = self.base_directory_combo.currentText()
        assets = os.listdir(os.path.join(self.base_directory, selected_folder))
        self.asset_list.clear()
        self.asset_list.addItems(assets)

    def update_blend_files(self):
        self.blend_list.clear()
        selected_asset = self.asset_list.currentItem()
        if selected_asset is not None:
            base_dir = os.path.join(self.base_directory, self.base_directory_combo.currentText())
            asset_path = os.path.join(base_dir, selected_asset.text())

            # Determine the selected stage based on the radio buttons
            if self.wip_radio.isChecked():
                stage_folder = "WIP"
            elif self.published_radio.isChecked():
                stage_folder = "Publish"
            elif self.approved_radio.isChecked():
                stage_folder = "Approved"
            else:
                print("No stage selected.")
                return

            stage_path = os.path.join(asset_path, stage_folder)
            if os.path.exists(stage_path):
                # blend_files = [f for f in os.listdir(stage_path) if f.endswith(".blend")]
                blend_files = [os.path.splitext(f)[0] for f in os.listdir(stage_path) if f.endswith(".blend")]
                # version_numbers = [f.split('_')[-1].split('.')[0] for f in blend_files]
                self.blend_list.addItems(blend_files)
            else:
                print(f"No '{stage_folder}' folder found in {asset_path}")
                
    def search_assets(self):
        search_text = self.search_input.text().lower()
        items = self.asset_list.findItems("", Qt.MatchContains)

        for item in items:
            if search_text in item.text().lower():
                item.setHidden(False)
            else:
                item.setHidden(True)
    
    def dummy_refresh(self):
        print("Refresh Button Clicked")

    def dummy_load(self):
        print("Load Button Clicked")
    
    def open_blend_file(self):
        selected_blend = self.blend_list.currentItem()
        selected_asset = self.asset_list.currentItem()
        if selected_blend is not None and selected_asset is not None:
            base_dir = os.path.join(self.base_directory, self.base_directory_combo.currentText())
            asset_path = os.path.join(base_dir, selected_asset.text())

            # Determine the selected stage based on the radio buttons
            if self.wip_radio.isChecked():
                stage_folder = "WIP"
            elif self.published_radio.isChecked():
                stage_folder = "Publish"
            elif self.approved_radio.isChecked():
                stage_folder = "Approved"
            else:
                print("No stage selected.")
                return

            publish_path = os.path.join(asset_path, stage_folder, selected_blend.text() + ".blend")

            print(f"Selected Asset: {selected_asset.text()}")
            print(f"Base Directory: {base_dir}")
            print(f"Asset Path: {asset_path}")
            print(f"Publish Path: {publish_path}")

            bpy.ops.wm.open_mainfile(filepath=publish_path)

    def append_blend_collection(self):
        # Get the selected blend file from the blend_list widget
        selected_blend = self.blend_list.currentItem()
        if selected_blend is not None:
            blend_name = os.path.splitext(selected_blend.text())[0]
            get_collection_name = re.sub(r'ALM_|_MOD|_WIP|_v\d{3}|.blend', '', blend_name)
            # name_parts = blend_name.split("_")
            # get_collection_name = name_parts[1]
            # get_collection_name = re.sub(r'\W+', '', get_collection_name)

            print(get_collection_name)
            
            if self.wip_radio.isChecked():
                stage_folder = "WIP"
            elif self.published_radio.isChecked():
                stage_folder = "Publish"
            elif self.approved_radio.isChecked():
                stage_folder = "Approved"
            else:
                print("No stage selected.")
                return

            blend_file_path = os.path.join(
                self.base_directory, 
                self.base_directory_combo.currentText(), 
                self.asset_list.currentItem().text(),
                stage_folder,
                f"{blend_name}.blend"
            )

            collection_name = get_collection_name
            
            # Link the collection with relative paths unchecked
            with bpy.data.libraries.load(blend_file_path, link=False) as (data_from, data_to):
                data_to.collections = [name for name in data_from.collections if name == collection_name]

            # Link the appended collection to the current scene
            for collection in data_to.collections:
                bpy.context.scene.collection.children.link(collection)

        #     # Find the linked collection
        #     linked_collection = bpy.data.collections[collection_name]

        #     # Link the linked collection to the current scene
        #     bpy.context.scene.collection.children.link(linked_collection)

        #     print(f"Linked collection '{collection_name}' from '{blend_file_path}' to current scene.")
        # else:
        #     print("No blend file selected.")
            
    def link_blend_collection(self):
        
        job_types = ['_MOD', '_RIG', '_LGT']
        status_types = ['_WIP', '_Publish', '_Approved']
        
        # Get the selected blend file from the blend_list widget
        selected_blend = self.blend_list.currentItem()
        if selected_blend is not None:
            blend_name = os.path.splitext(selected_blend.text())[0]
            
            # Construct the regular expression pattern dynamically
            job_pattern  = '|'.join(job_types) 
            status_pattern = '|'.join(status_types) 
            
            get_collection_name = re.sub(r'ALM_|' + job_pattern + r'|' + status_pattern + r'|_v\d{3}|.blend', '', blend_name)

            print(get_collection_name)
            
            if self.wip_radio.isChecked():
                stage_folder = "WIP"
            elif self.published_radio.isChecked():
                stage_folder = "Publish"
            elif self.approved_radio.isChecked():
                stage_folder = "Approved"
            else:
                print("No stage selected.")
                return

            blend_file_path = os.path.join(
                self.base_directory, 
                self.base_directory_combo.currentText(), 
                self.asset_list.currentItem().text(),
                stage_folder,
                f"{blend_name}.blend"
            )

            collection_name = get_collection_name
            
            # Link the collection with relative paths unchecked
            with bpy.data.libraries.load(blend_file_path, link=True, relative=False) as (data_from, data_to):
                data_to.collections = [name for name in data_from.collections if name == collection_name]

            # Find the linked collection
            linked_collection = bpy.data.collections[collection_name]

            # Link the linked collection to the current scene
            bpy.context.scene.collection.children.link(linked_collection)

            print(f"Linked collection '{collection_name}' from '{blend_file_path}' to current scene.")
        else:
            print("No blend file selected.")

            
class VIEW3D_PT_Global_Properties(bpy.types.Panel):
    bl_label = "PySide2 Blender"
    bl_category = "PySide2 Blender"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    
    def draw(self, context):
        layout = self.layout
        layout.operator("test.open_mtools_popup", icon = "EXPORT")

def register():
    bpy.utils.register_class(Open_Mtools_Popup)
    bpy.utils.register_class(VIEW3D_PT_Global_Properties)

def unregister():
    bpy.utils.unregister_class(Open_Mtools_Popup)
    bpy.utils.unregister_class(VIEW3D_PT_Global_Properties)

if __name__ == "__main__":
    register()
