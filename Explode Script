import bpy

class ExplodePanel(bpy.types.Panel):
    bl_label = "Explode Script"
    bl_idname = "OBJECT_PT_explode"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Explode'

    def draw(self, context):
        layout = self.layout
        layout.prop(context.scene, "txt_suffixLP")
        layout.prop(context.scene, "txt_suffixHP")
        layout.prop(context.scene, "explode_value")
        layout.operator("object.explode_meshes", text="Explode")

def main():
    scene = bpy.context.scene
    suffixLP = scene.txt_suffixLP
    suffixHP = scene.txt_suffixHP
    fixed_dist = scene.explode_value

    meshes = [obj for obj in bpy.context.selected_objects if obj.type == 'MESH']
    meshes_lp, meshes_hp = filter_meshes(meshes, suffixLP, suffixHP)
    
    all_meshes = meshes_lp + meshes_hp
    reset_pivots(all_meshes)
    set_keyframes(all_meshes, 1)
    move_lp(meshes_lp, fixed_dist)
    find_matchmate(meshes_lp, meshes_hp)
    set_keyframes(all_meshes, 30)

def get_size(mesh):
    bounding_box = mesh.bound_box
    min_x = min(v[0] for v in bounding_box)
    max_x = max(v[0] for v in bounding_box)
    return max_x - min_x

def move_lp(meshes_lp, fixed_dist):
    tranX = 0
    for mesh in meshes_lp:
        current_mesh_size = get_size(mesh)
        if mesh != meshes_lp[0]:
            mesh.location.x = tranX + current_mesh_size / 2 + fixed_dist
        tranX = mesh.location.x + current_mesh_size / 2

def filter_meshes(meshes, suffixLP, suffixHP):
    meshes_lp = [mesh for mesh in meshes if mesh.name.endswith(suffixLP)]
    meshes_hp = [mesh for mesh in meshes if mesh.name.endswith(suffixHP)]
    return meshes_lp, meshes_hp

def reset_pivots(meshes):
    bpy.ops.object.select_all(action='DESELECT')
    for mesh in meshes:
        mesh.select_set(True)
    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')
    bpy.ops.object.select_all(action='DESELECT')

def set_keyframes(meshes, frame):
    for mesh in meshes:
        mesh.keyframe_insert(data_path="location", frame=frame)

def find_matchmate(meshes_lp, meshes_hp):
    scene = bpy.context.scene
    suffixLP = scene.txt_suffixLP
    suffixHP = scene.txt_suffixHP

    mesh_dict = {mesh_lp.name.removesuffix(suffixLP): mesh_lp for mesh_lp in meshes_lp}

    for mesh_hp in meshes_hp:
        name_hp = mesh_hp.name.removesuffix(suffixHP)
        if name_hp in mesh_dict:
            mesh_lp = mesh_dict[name_hp]
            mesh_hp.location.x = mesh_lp.location.x

class ExplodeMeshesOperator(bpy.types.Operator):
    bl_idname = "object.explode_meshes"
    bl_label = "Explode Meshes"

    def execute(self, context):
        main()
        return {'FINISHED'}

def register():
    bpy.utils.register_class(ExplodePanel)
    bpy.utils.register_class(ExplodeMeshesOperator)
    bpy.types.Scene.txt_suffixLP = bpy.props.StringProperty(name="Name suffix (LP):", default="_LP")
    bpy.types.Scene.txt_suffixHP = bpy.props.StringProperty(name="Name suffix (HP):", default="_HP")
    bpy.types.Scene.explode_value = bpy.props.FloatProperty(name="Explode value:", default=1.0, min=1, max=1000)

def unregister():
    bpy.utils.unregister_class(ExplodePanel)
    bpy.utils.unregister_class(ExplodeMeshesOperator)
    del bpy.types.Scene.txt_suffixLP
    del bpy.types.Scene.txt_suffixHP
    del bpy.types.Scene.explode_value

if __name__ == "__main__":
    register()
